////  DrawingView.swift//  SVGParser-Test1////  Created by Jeff on 2014-08-07.//  Copyright (c) 2014 Jeff. All rights reserved.//import UIKit;import QuartzCore;class DrawingView: UIView {//    required init(coder aDecoder: NSCoder!)//    {//        super.init(coder: aDecoder)//    }        //RECTANGLE        func rectCreate(#x:CGFloat, y:CGFloat, width:CGFloat, height:CGFloat, redFill:CGFloat, greenFill:CGFloat, blueFill:CGFloat, alphaFill:CGFloat, strokeWidth:CGFloat, redLine:CGFloat, greenLine:CGFloat, blueLine:CGFloat) {            var rectMask:CAShapeLayer = CAShapeLayer();            //Borderline            rectMask.lineWidth = strokeWidth;        var borderColour:CGColorRef = UIColor(red: redLine, green: greenLine,blue: blueLine, alpha: 1.0).CGColor;        rectMask.strokeColor = borderColour;            //Shapefill            var fillColour:CGColorRef = UIColor(red: redFill, green: greenFill, blue: blueFill, alpha: alphaFill).CGColor;        rectMask.fillColor = fillColour;            // Path and Show            var pathing:CGRect = CGRectMake(x, y, width, height);        rectMask.path = CGPathCreateWithRect(pathing, nil);        self.layer.addSublayer(rectMask);        }        //CIRCLE        func circleCreate(#x:CGFloat, y:CGFloat, widthDia:CGFloat, heightDia:CGFloat, redFill:CGFloat, greenFill:CGFloat, blueFill:CGFloat, alphaFill:CGFloat, strokeWidth:CGFloat, redLine:CGFloat, greenLine:CGFloat, blueLine:CGFloat) {                var circleMask:CAShapeLayer = CAShapeLayer();                //Borderline                circleMask.lineWidth = strokeWidth;        var borderColour:CGColorRef = UIColor(red: redLine, green: greenLine, blue: blueLine, alpha: 1.0).CGColor;        circleMask.strokeColor = borderColour;                //Shapefill                var fillColour:CGColorRef = UIColor(red: redFill, green: greenFill, blue: blueFill, alpha: alphaFill).CGColor;        circleMask.fillColor = fillColour;                //Path and Show                var pathing:CGRect = CGRectMake(x,y, widthDia, heightDia);        circleMask.path = CGPathCreateWithEllipseInRect(pathing, nil);        self.layer.addSublayer(circleMask);        }        //POLYGON        func polygonCreate(#pointsArray:[CGFloat], redFill:CGFloat, greenFill:CGFloat, blueFill:CGFloat, strokeWidth:CGFloat, redLine:CGFloat, greenLine:CGFloat, blueLine:CGFloat) {                        var pathMask:CAShapeLayer = CAShapeLayer();                        //Borderline                        pathMask.lineWidth = strokeWidth;            var borderColour:CGColorRef = UIColor(red: redLine, green: greenLine, blue: blueLine, alpha: 1.0).CGColor;            pathMask.strokeColor = borderColour;                        //Shapefill                    var fillColour:CGColorRef = UIColor(red: redFill, green: greenFill, blue: blueFill, alpha: 1.0).CGColor;            pathMask.fillColor = fillColour;                        //Path                        var pathing:UIBezierPath = UIBezierPath();            pathing.moveToPoint(CGPointMake(pointsArray[0], pointsArray[1]));                        for indexer in 1...(pointsArray.count - 1)/2 {                pathing.addLineToPoint(CGPointMake(pointsArray[indexer*2], pointsArray[(indexer*2)+1]));            }                        pathing.closePath();                        pathMask.path = pathing.CGPath;                        //Show                        self.layer.addSublayer(pathMask);    }        //POLYLINES        func polyLineCreate(#pointsArray:[CGFloat], strokeWidth:CGFloat, redLine:CGFloat, greenLine:CGFloat, blueLine:CGFloat) {            var pathMask:CAShapeLayer = CAShapeLayer();                //Borderline                pathMask.lineWidth = strokeWidth;        var borderColour:CGColorRef = UIColor(red: redLine, green: greenLine, blue: blueLine, alpha: 1.0).CGColor;        pathMask.strokeColor = borderColour;                //Shapefill                pathMask.fillColor = nil;                //Path                var pathing:UIBezierPath = UIBezierPath();        pathing.moveToPoint(CGPointMake(pointsArray[0], pointsArray[1]));                for indexer in 1...(pointsArray.count - 1)/2 {        pathing.addLineToPoint(CGPointMake(pointsArray[indexer*2], pointsArray[(indexer*2)+1]));        };                pathMask.path = pathing.CGPath;                //Show                self.layer.addSublayer(pathMask);    }        // TEXT        func labelCreate (#x:CGFloat, y:CGFloat, text:String, textSize:CGFloat, fontType:String) {            var label:UILabel = UILabel(frame: CGRectMake(x, y-textSize, 1000, textSize));        label.text = text;        label.font = UIFont(name: fontType, size: textSize);        label.textAlignment = NSTextAlignment.Left;        self.addSubview(label);        }        //LINE        func lineCreate (#x1:CGFloat, y1:CGFloat, x2:CGFloat, y2:CGFloat, strokeWidth:CGFloat, strokeColour:CGColorRef) {        var lineMask = CAShapeLayer();        var linePath = UIBezierPath();        linePath.moveToPoint(CGPointMake(x1, y1));        linePath.addLineToPoint(CGPointMake(x2, y2));        lineMask.lineWidth = strokeWidth;    lineMask.strokeColor = strokeColour;    lineMask.path = linePath.CGPath;        self.layer.addSublayer(lineMask);    }        }