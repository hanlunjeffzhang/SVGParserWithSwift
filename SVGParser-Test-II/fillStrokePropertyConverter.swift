////  fillStrokePropertyConverter.swift//  SVGParser-Test-II////  Created by Jeff on 2014-08-12.//  Copyright (c) 2014 Jeff. All rights reserved.//import Foundationimport UIKit;var hexCharSet:NSCharacterSet = NSCharacterSet(charactersInString: "1234567890abcdefABCDEF"),alphabetSet:NSCharacterSet = NSCharacterSet(charactersInString: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"),numberSet:NSCharacterSet = NSCharacterSet(charactersInString: "1234567890#")func fillSetter() {        //var fillAttributeArray = fillAt        var ranger:NSRange = fillAttributeString.rangeOfCharacterFromSet(alphabetSet), ranger2:NSRange = fillAttributeString.rangeOfCharacterFromSet(numberSet);    if (ranger.location != NSNotFound && ranger2.location == NSNotFound){        println("is \(fillAttributeString)");        var colourconvert = RGBColourInFloatFromColourName(fillAttributeString);        redScheme = colourconvert.red; greenScheme = colourconvert.green; blueScheme = colourconvert.blue; alphaScheme = colourconvert.alpha;        println("hit");    }  else if ((fillAttributeString as NSString).substringToIndex(1) == "#"){    var fillHex = (fillAttributeString as NSString);    var hexArray:[String] = [fillHex.substringWithRange(NSMakeRange(1, 1)), fillHex.substringWithRange(NSMakeRange(2, 1)), fillHex.substringWithRange(NSMakeRange(3, 1)), fillHex.substringWithRange(NSMakeRange(4, 1)), fillHex.substringWithRange(NSMakeRange(5, 1)), fillHex.substringWithRange(NSMakeRange(6, 1))];    var hexFloatArray:[Float] = [0, 0, 0, 0, 0, 0];        for indexer in 0...5 {    switch hexArray[indexer] {        case "1": hexFloatArray[indexer] = 1.0;        case "2": hexFloatArray[indexer] = 2.0;        case "3": hexFloatArray[indexer] = 3.0;        case "4": hexFloatArray[indexer] = 4.0;        case "5": hexFloatArray[indexer] = 5.0;        case "6": hexFloatArray[indexer] = 6.0;        case "7": hexFloatArray[indexer] = 7.0;        case "8": hexFloatArray[indexer] = 8.0;        case "9": hexFloatArray[indexer] = 9.0;        case "a": hexFloatArray[indexer] = 10.0;        case "b": hexFloatArray[indexer] = 11.0;        case "c": hexFloatArray[indexer] = 12.0;        case "d": hexFloatArray[indexer] = 13.0;        case "e": hexFloatArray[indexer] = 14.0;        case "f": hexFloatArray[indexer] = 15.0;default: println("error"); }       redScheme = CGFloat(((hexFloatArray[0] * 16.0) + hexFloatArray[1])/255.0);    greenScheme = CGFloat(((hexFloatArray[2] * 16.0) + hexFloatArray[3])/255.0);    blueScheme = CGFloat(((hexFloatArray[4] * 16.0) + hexFloatArray[5])/255.0);    }        }    }func lineColourSetter() {        var ranger:NSRange = strokeColourAttribute.rangeOfCharacterFromSet(alphabetSet), ranger2:NSRange = strokeColourAttribute.rangeOfCharacterFromSet(numberSet);    if (ranger.location != NSNotFound && ranger2.location == NSNotFound){        var colourconvert = RGBColourInFloatFromColourName(strokeColourAttribute)        redLineScheme = colourconvert.red; greenLineScheme = colourconvert.green; blueLineScheme = colourconvert.blue; alphaLineScheme = colourconvert.alpha;    } else if ((strokeColourAttribute as NSString).substringToIndex(1) == "#") { var strokeHex = (strokeColourAttribute as NSString)    var hexArray:[String] = [strokeHex.substringWithRange(NSMakeRange(1, 1)), strokeHex.substringWithRange(NSMakeRange(2, 1)), strokeHex.substringWithRange(NSMakeRange(3, 1)), strokeHex.substringWithRange(NSMakeRange(4, 1)), strokeHex.substringWithRange(NSMakeRange(5, 1)), strokeHex.substringWithRange(NSMakeRange(6, 1))];    var hexFloatArray:[Float] = [0, 0, 0, 0, 0, 0];        for indexer in 0...5 {    switch hexArray[indexer] {        case "1": hexFloatArray[indexer] = 1.0;        case "2": hexFloatArray[indexer] = 2.0;        case "3": hexFloatArray[indexer] = 3.0;        case "4": hexFloatArray[indexer] = 4.0;        case "5": hexFloatArray[indexer] = 5.0;        case "6": hexFloatArray[indexer] = 6.0;        case "7": hexFloatArray[indexer] = 7.0;        case "8": hexFloatArray[indexer] = 8.0;        case "9": hexFloatArray[indexer] = 9.0;        case "a": hexFloatArray[indexer] = 10.0;        case "b": hexFloatArray[indexer] = 11.0;        case "c": hexFloatArray[indexer] = 12.0;        case "d": hexFloatArray[indexer] = 13.0;        case "e": hexFloatArray[indexer] = 14.0;        case "f": hexFloatArray[indexer] = 15.0;        default: println("error"); }        redLineScheme = CGFloat(((hexFloatArray[0] * 16.0) + hexFloatArray[1])/255.0);    greenLineScheme = CGFloat(((hexFloatArray[2] * 16.0) + hexFloatArray[3])/255.0);    blueLineScheme = CGFloat(((hexFloatArray[4] * 16.0) + hexFloatArray[5])/255.0);    }}}func RGBColourFromColourName(ColourName:String) -> CGColorRef {        switch ColourName {case "red" : return UIColor(red: 1, green: 0, blue: 0, alpha: 1.0).CGColor;case "green": return UIColor(red: 0, green: 0.5, blue: 0, alpha: 1.0).CGColor;case "blue": return UIColor(red: 0, green: 0, blue: 1, alpha: 1.0).CGColor;case "yellow": return UIColor(red: 1, green: 1, blue: 0, alpha: 1.0).CGColor;case "black": return UIColor(red: 0, green: 0, blue: 0, alpha: 1.0).CGColor;case "aqua": return UIColor(red: 0, green: 1, blue: 1, alpha: 1.0).CGColor;case "fuchsia": return UIColor(red: 1, green: 0, blue: 1, alpha: 1.0).CGColor;case "gray": return UIColor(red: 0.5, green: 0.5, blue: 0.5, alpha: 1.0).CGColor;case "lime": return UIColor(red: 0, green: 1, blue: 0, alpha: 1.0).CGColor;case "maroon": return UIColor(red: 0.5, green: 0, blue: 0, alpha: 1.0).CGColor;case "navy": return UIColor(red: 0, green: 0, blue: 0.5, alpha: 1.0).CGColor;case "olive": return UIColor(red: 0.5, green: 0.5, blue: 0, alpha: 1.0).CGColor;case "purple": return UIColor(red: 1, green: 0, blue: 1, alpha: 1.0).CGColor;case "silver": return UIColor(red: 0.75, green: 0.75, blue: 0.75, alpha: 1.0).CGColor;case "teal": return UIColor(red: 0, green: 0.5, blue: 0.5, alpha: 1.0).CGColor;case "white": return UIColor(red: 1, green: 1, blue: 1, alpha: 1.0).CGColor;default: return UIColor(red: 0, green: 0, blue: 0, alpha: 1.0).CGColor;    }    }func RGBColourInFloatFromColourName (ColourName: String) -> (red: CGFloat, green:CGFloat, blue:CGFloat, alpha:CGFloat) {        switch ColourName {case "red" : return (1, 0, 0, 1);case "green": return (0, 1, 0, 1);case "blue": return (0, 0, 1, 1);case "yellow": return (1, 1, 0, 1);case "black": return (0, 0, 0, 1);case "aqua": return (0, 1, 1, 1);case "fuchsia": return (1, 0, 1, 1);case "gray": return (0.5, 0.5, 0.5, 1);case "lime": return (0, 1, 0, 1);case "maroon": return (0.5, 0, 0, 1);case "navy": return (0, 0, 0.5, 1);case "olive": return (0.5, 0.5, 0, 1);case "purple": return (1, 0, 1, 1);case "silver": return (0.75, 0.75, 0.75, 1);case "teal": return (0, 0.5, 0.5, 1);case "white": return (1, 1, 1, 1);default: return (0, 0, 0, 0);    }    }